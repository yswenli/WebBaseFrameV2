//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由WEF数据库工具, Version=4.1.0.2, Culture=neutral, PublicKeyToken=null生成;时间 2020-07-04 12:57:46.005
//     运行时版本:4.0.30319.42000
//     不建议手动更改此代码，如有需要请自行扩展partial类
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Runtime.Serialization;
using WEF;
using WEF.Common;
using WEF.Section;

namespace WebBaseFrame.Models
{

	/// <summary>
	/// 实体类Site
	/// </summary>
	[Serializable, DataContract, Table("Site")]
	public partial class Site : Entity
	{
		private static string m_tableName;
		public Site() : base("Site") { m_tableName = "Site"; }
		public Site(string tableName) : base(tableName) { m_tableName = tableName; }

		#region Model
		private int _ID;
		private string _Name;
		private string _Url;
		private string _KeyWords;
		private string _Description;
		private int? _UploadMaxSize;
		private string _UploadAllowExt;
		private int? _WatermarkEnable;
		private int? _WatermarkMinWidth;
		private int? _WatermarkMinHeight;
		private string _WatermarkImg;
		private int? _WatermarkPct;
		private int? _WatermarkQuality;
		private int? _WatermarkPos;
		private string _GoogleJS;
		private string _CopyRight;
		private bool? _IsValidePermission;
		private bool? _IsFromFile;
		private bool? _IsDeleloper;
		private int? _CreateUserID;
		private int? _LastUpdateUserID;
		private DateTime? _CreateDate;
		private DateTime? _LastUpdateDate;
		private bool _IsDeleted;
		/// <summary>
		/// ID 
		/// </summary>
		[DataMember]
		public int ID
		{
			get { return _ID; }
			set
			{
				this.OnPropertyValueChange(_.ID, _ID, value);
				this._ID = value;
			}
		}
		/// <summary>
		/// Name 
		/// </summary>
		[DataMember]
		public string Name
		{
			get { return _Name; }
			set
			{
				this.OnPropertyValueChange(_.Name, _Name, value);
				this._Name = value;
			}
		}
		/// <summary>
		/// Url 
		/// </summary>
		[DataMember]
		public string Url
		{
			get { return _Url; }
			set
			{
				this.OnPropertyValueChange(_.Url, _Url, value);
				this._Url = value;
			}
		}
		/// <summary>
		/// KeyWords 
		/// </summary>
		[DataMember]
		public string KeyWords
		{
			get { return _KeyWords; }
			set
			{
				this.OnPropertyValueChange(_.KeyWords, _KeyWords, value);
				this._KeyWords = value;
			}
		}
		/// <summary>
		/// Description 
		/// </summary>
		[DataMember]
		public string Description
		{
			get { return _Description; }
			set
			{
				this.OnPropertyValueChange(_.Description, _Description, value);
				this._Description = value;
			}
		}
		/// <summary>
		/// UploadMaxSize 
		/// </summary>
		[DataMember]
		public int? UploadMaxSize
		{
			get { return _UploadMaxSize; }
			set
			{
				this.OnPropertyValueChange(_.UploadMaxSize, _UploadMaxSize, value);
				this._UploadMaxSize = value;
			}
		}
		/// <summary>
		/// UploadAllowExt 
		/// </summary>
		[DataMember]
		public string UploadAllowExt
		{
			get { return _UploadAllowExt; }
			set
			{
				this.OnPropertyValueChange(_.UploadAllowExt, _UploadAllowExt, value);
				this._UploadAllowExt = value;
			}
		}
		/// <summary>
		/// WatermarkEnable 
		/// </summary>
		[DataMember]
		public int? WatermarkEnable
		{
			get { return _WatermarkEnable; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkEnable, _WatermarkEnable, value);
				this._WatermarkEnable = value;
			}
		}
		/// <summary>
		/// WatermarkMinWidth 
		/// </summary>
		[DataMember]
		public int? WatermarkMinWidth
		{
			get { return _WatermarkMinWidth; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkMinWidth, _WatermarkMinWidth, value);
				this._WatermarkMinWidth = value;
			}
		}
		/// <summary>
		/// WatermarkMinHeight 
		/// </summary>
		[DataMember]
		public int? WatermarkMinHeight
		{
			get { return _WatermarkMinHeight; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkMinHeight, _WatermarkMinHeight, value);
				this._WatermarkMinHeight = value;
			}
		}
		/// <summary>
		/// WatermarkImg 
		/// </summary>
		[DataMember]
		public string WatermarkImg
		{
			get { return _WatermarkImg; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkImg, _WatermarkImg, value);
				this._WatermarkImg = value;
			}
		}
		/// <summary>
		/// WatermarkPct 
		/// </summary>
		[DataMember]
		public int? WatermarkPct
		{
			get { return _WatermarkPct; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkPct, _WatermarkPct, value);
				this._WatermarkPct = value;
			}
		}
		/// <summary>
		/// WatermarkQuality 
		/// </summary>
		[DataMember]
		public int? WatermarkQuality
		{
			get { return _WatermarkQuality; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkQuality, _WatermarkQuality, value);
				this._WatermarkQuality = value;
			}
		}
		/// <summary>
		/// WatermarkPos 
		/// </summary>
		[DataMember]
		public int? WatermarkPos
		{
			get { return _WatermarkPos; }
			set
			{
				this.OnPropertyValueChange(_.WatermarkPos, _WatermarkPos, value);
				this._WatermarkPos = value;
			}
		}
		/// <summary>
		/// GoogleJS 
		/// </summary>
		[DataMember]
		public string GoogleJS
		{
			get { return _GoogleJS; }
			set
			{
				this.OnPropertyValueChange(_.GoogleJS, _GoogleJS, value);
				this._GoogleJS = value;
			}
		}
		/// <summary>
		/// CopyRight 
		/// </summary>
		[DataMember]
		public string CopyRight
		{
			get { return _CopyRight; }
			set
			{
				this.OnPropertyValueChange(_.CopyRight, _CopyRight, value);
				this._CopyRight = value;
			}
		}
		/// <summary>
		/// IsValidePermission 
		/// </summary>
		[DataMember]
		public bool? IsValidePermission
		{
			get { return _IsValidePermission; }
			set
			{
				this.OnPropertyValueChange(_.IsValidePermission, _IsValidePermission, value);
				this._IsValidePermission = value;
			}
		}
		/// <summary>
		/// IsFromFile 
		/// </summary>
		[DataMember]
		public bool? IsFromFile
		{
			get { return _IsFromFile; }
			set
			{
				this.OnPropertyValueChange(_.IsFromFile, _IsFromFile, value);
				this._IsFromFile = value;
			}
		}
		/// <summary>
		/// IsDeleloper 
		/// </summary>
		[DataMember]
		public bool? IsDeleloper
		{
			get { return _IsDeleloper; }
			set
			{
				this.OnPropertyValueChange(_.IsDeleloper, _IsDeleloper, value);
				this._IsDeleloper = value;
			}
		}
		/// <summary>
		/// CreateUserID 
		/// </summary>
		[DataMember]
		public int? CreateUserID
		{
			get { return _CreateUserID; }
			set
			{
				this.OnPropertyValueChange(_.CreateUserID, _CreateUserID, value);
				this._CreateUserID = value;
			}
		}
		/// <summary>
		/// LastUpdateUserID 
		/// </summary>
		[DataMember]
		public int? LastUpdateUserID
		{
			get { return _LastUpdateUserID; }
			set
			{
				this.OnPropertyValueChange(_.LastUpdateUserID, _LastUpdateUserID, value);
				this._LastUpdateUserID = value;
			}
		}
		/// <summary>
		/// CreateDate 
		/// </summary>
		[DataMember]
		public DateTime? CreateDate
		{
			get { return _CreateDate; }
			set
			{
				this.OnPropertyValueChange(_.CreateDate, _CreateDate, value);
				this._CreateDate = value;
			}
		}
		/// <summary>
		/// LastUpdateDate 
		/// </summary>
		[DataMember]
		public DateTime? LastUpdateDate
		{
			get { return _LastUpdateDate; }
			set
			{
				this.OnPropertyValueChange(_.LastUpdateDate, _LastUpdateDate, value);
				this._LastUpdateDate = value;
			}
		}
		/// <summary>
		/// IsDeleted 
		/// </summary>
		[DataMember]
		public bool IsDeleted
		{
			get { return _IsDeleted; }
			set
			{
				this.OnPropertyValueChange(_.IsDeleted, _IsDeleted, value);
				this._IsDeleted = value;
			}
		}
		#endregion

		#region Method
		/// <summary>
		/// 获取实体中的标识列
		/// </summary>
		public override Field GetIdentityField()
		{
			return _.ID;
		}
		/// <summary>
		/// 获取实体中的主键列
		/// </summary>
		public override Field[] GetPrimaryKeyFields()
		{
			return new Field[] {
				_.ID};
		}
		/// <summary>
		/// 获取列信息
		/// </summary>
		public override Field[] GetFields()
		{
			return new Field[] {
				_.ID,
				_.Name,
				_.Url,
				_.KeyWords,
				_.Description,
				_.UploadMaxSize,
				_.UploadAllowExt,
				_.WatermarkEnable,
				_.WatermarkMinWidth,
				_.WatermarkMinHeight,
				_.WatermarkImg,
				_.WatermarkPct,
				_.WatermarkQuality,
				_.WatermarkPos,
				_.GoogleJS,
				_.CopyRight,
				_.IsValidePermission,
				_.IsFromFile,
				_.IsDeleloper,
				_.CreateUserID,
				_.LastUpdateUserID,
				_.CreateDate,
				_.LastUpdateDate,
				_.IsDeleted};
		}
		/// <summary>
		/// 获取值信息
		/// </summary>
		public override object[] GetValues()
		{
			return new object[] {
				this._ID,
				this._Name,
				this._Url,
				this._KeyWords,
				this._Description,
				this._UploadMaxSize,
				this._UploadAllowExt,
				this._WatermarkEnable,
				this._WatermarkMinWidth,
				this._WatermarkMinHeight,
				this._WatermarkImg,
				this._WatermarkPct,
				this._WatermarkQuality,
				this._WatermarkPos,
				this._GoogleJS,
				this._CopyRight,
				this._IsValidePermission,
				this._IsFromFile,
				this._IsDeleloper,
				this._CreateUserID,
				this._LastUpdateUserID,
				this._CreateDate,
				this._LastUpdateDate,
				this._IsDeleted};
		}
		#endregion

		#region _Field
		/// <summary>
		/// 字段信息
		/// </summary>
		public class _
		{
			/// <summary>
			/// Site 
			/// </summary>
			public readonly static Field All = new Field("*", m_tableName);
			/// <summary>
			/// ID 
			/// </summary>
			public readonly static Field ID = new Field("ID", m_tableName, "ID");
			/// <summary>
			/// Name 
			/// </summary>
			public readonly static Field Name = new Field("Name", m_tableName, "Name");
			/// <summary>
			/// Url 
			/// </summary>
			public readonly static Field Url = new Field("Url", m_tableName, "Url");
			/// <summary>
			/// KeyWords 
			/// </summary>
			public readonly static Field KeyWords = new Field("KeyWords", m_tableName, "KeyWords");
			/// <summary>
			/// Description 
			/// </summary>
			public readonly static Field Description = new Field("Description", m_tableName, "Description");
			/// <summary>
			/// UploadMaxSize 
			/// </summary>
			public readonly static Field UploadMaxSize = new Field("UploadMaxSize", m_tableName, "UploadMaxSize");
			/// <summary>
			/// UploadAllowExt 
			/// </summary>
			public readonly static Field UploadAllowExt = new Field("UploadAllowExt", m_tableName, "UploadAllowExt");
			/// <summary>
			/// WatermarkEnable 
			/// </summary>
			public readonly static Field WatermarkEnable = new Field("WatermarkEnable", m_tableName, "WatermarkEnable");
			/// <summary>
			/// WatermarkMinWidth 
			/// </summary>
			public readonly static Field WatermarkMinWidth = new Field("WatermarkMinWidth", m_tableName, "WatermarkMinWidth");
			/// <summary>
			/// WatermarkMinHeight 
			/// </summary>
			public readonly static Field WatermarkMinHeight = new Field("WatermarkMinHeight", m_tableName, "WatermarkMinHeight");
			/// <summary>
			/// WatermarkImg 
			/// </summary>
			public readonly static Field WatermarkImg = new Field("WatermarkImg", m_tableName, "WatermarkImg");
			/// <summary>
			/// WatermarkPct 
			/// </summary>
			public readonly static Field WatermarkPct = new Field("WatermarkPct", m_tableName, "WatermarkPct");
			/// <summary>
			/// WatermarkQuality 
			/// </summary>
			public readonly static Field WatermarkQuality = new Field("WatermarkQuality", m_tableName, "WatermarkQuality");
			/// <summary>
			/// WatermarkPos 
			/// </summary>
			public readonly static Field WatermarkPos = new Field("WatermarkPos", m_tableName, "WatermarkPos");
			/// <summary>
			/// GoogleJS 
			/// </summary>
			public readonly static Field GoogleJS = new Field("GoogleJS", m_tableName, "GoogleJS");
			/// <summary>
			/// CopyRight 
			/// </summary>
			public readonly static Field CopyRight = new Field("CopyRight", m_tableName, "CopyRight");
			/// <summary>
			/// IsValidePermission 
			/// </summary>
			public readonly static Field IsValidePermission = new Field("IsValidePermission", m_tableName, "IsValidePermission");
			/// <summary>
			/// IsFromFile 
			/// </summary>
			public readonly static Field IsFromFile = new Field("IsFromFile", m_tableName, "IsFromFile");
			/// <summary>
			/// IsDeleloper 
			/// </summary>
			public readonly static Field IsDeleloper = new Field("IsDeleloper", m_tableName, "IsDeleloper");
			/// <summary>
			/// CreateUserID 
			/// </summary>
			public readonly static Field CreateUserID = new Field("CreateUserID", m_tableName, "CreateUserID");
			/// <summary>
			/// LastUpdateUserID 
			/// </summary>
			public readonly static Field LastUpdateUserID = new Field("LastUpdateUserID", m_tableName, "LastUpdateUserID");
			/// <summary>
			/// CreateDate 
			/// </summary>
			public readonly static Field CreateDate = new Field("CreateDate", m_tableName, "CreateDate");
			/// <summary>
			/// LastUpdateDate 
			/// </summary>
			public readonly static Field LastUpdateDate = new Field("LastUpdateDate", m_tableName, "LastUpdateDate");
			/// <summary>
			/// IsDeleted 
			/// </summary>
			public readonly static Field IsDeleted = new Field("IsDeleted", m_tableName, "IsDeleted");
		}
		#endregion


	}
	/// <summary>
	/// 实体类Site操作类
	/// </summary>
	public partial class SiteRepository : IRepository<Site>
	{
		DBContext db;
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<Site> Search(string tableName = "")
		{
			if (string.IsNullOrEmpty(tableName))
			{
				tableName = "Site";
			}
			return db.Search<Site>(tableName);
		}
		/// <summary>
		/// 当前实体查询上下文
		/// </summary>
		public ISearch<Site> Search(Site entity)
		{
			return db.Search<Site>(entity);
		}
		/// <summary>
		/// 构造方法
		/// </summary>
		public SiteRepository()
		{
			db = new DBContext();
		}
		/// <summary>
		/// 构造方法
		/// </summary>
		public SiteRepository(DBContext dbContext)
		{
			db = dbContext;
		}
		/// <summary>
		/// 构造方法
		/// <param name="connStrName">连接字符串中的名称</param>
		/// </summary>
		public SiteRepository(string connStrName)
		{
			db = new DBContext(connStrName);
		}
		/// <summary>
		/// 构造方法
		/// <param name="dbType">数据库类型</param>
		/// <param name="connStr">连接字符串</param>
		/// </summary>
		public SiteRepository(DatabaseType dbType, string connStr)
		{
			db = new DBContext(dbType, connStr);
		}
		/// <summary>
		/// 当前db操作上下文
		/// </summary>
		public DBContext DBContext
		{
			get
			{
				return db;
			}
		}
		/// <summary>
		/// 获取实体
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public Site GetSite(int ID)
		{
			return Search().Where(b => b.ID == ID).First();
		}
		/// <summary>
		/// 获取列表
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<Site> GetList(int pageIndex, int pageSize)
		{
			return this.Search().Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 获取列表
		/// <param name="tableName">表名</param>
		/// <param name="pageIndex">分页第几页</param>
		/// <param name="pageSize">分页一页取值</param>
		/// </summary>
		public List<Site> GetList(string tableName, int pageIndex = 1, int pageSize = 12)
		{
			return this.Search(tableName).Page(pageIndex, pageSize).ToList();
		}
		/// <summary>
		/// 添加实体
		/// <param name="entity">传进的实体</param>
		/// </summary>
		public int Insert(Site entity)
		{
			return db.Insert(entity);
		}
		/// <summary>
		/// 更新实体
		/// <param name="entity">传进的实体</param>
		/// </summary>
		public int Update(Site entity)
		{
			return db.Update(entity);
		}
		/// <summary>
		/// 删除实体
		/// <param name="entity">传进的实体</param>
		/// </summary>
		public int Delete(Site entity)
		{
			return db.Delete(entity);
		}
		/// <summary>
		/// 删除实体
		/// <param name="ID">ID</param>
		/// </summary>
		public int Delete(int ID)
		{
			var entity = Search().Where(b => b.ID == ID).First();
			if (entity == null) return -1;
			entity.Attach(EntityState.Deleted);
			return db.Save(entity);
		}
		/// <summary>
		/// 批量删除实体
		/// <param name="obj">传进的实体列表</param>
		/// </summary>
		public int Deletes(List<Site> entities)
		{
			return db.Delete<Site>(entities);
		}
		/// <summary>
		/// 持久化实体
		/// <param name="entity">传进的实体</param>
		/// </summary>
		public int Save(Site entity)
		{
			return db.Save<Site>(entity);
		}
		/// <summary>
		/// 批量持久化实体
		/// <param name="entities">传进的实体列表</param>
		/// </summary>
		public int Save(List<Site> entities)
		{
			return db.Save<Site>(entities);
		}
		/// <summary>
		/// 持久化实体
		/// <param name="tran">事务</param>
		/// <param name="entity">传进的实体</param>
		/// </summary>
		public int Save(DbTransaction tran, Site entity)
		{
			return db.Save<Site>(tran, entity);
		}
		/// <summary>
		/// 批量持久化实体
		/// <param name="tran">事务</param>
		/// <param name="entity">传进的实体列表</param>
		/// </summary>
		public int Save(DbTransaction tran, List<Site> entities)
		{
			return db.Save<Site>(tran, entities);
		}
		/// <summary>
		/// 执行sql语句
		/// <param name="sql"></param>
		/// </summary>
		public SqlSection ExecuteSQL(string sql)
		{
			return db.FromSql(sql);
		}
		/// <summary>
		/// 执行存储过程
		/// <param name="sql"></param>
		/// </summary>
		public ProcSection ExcuteProc(string procName)
		{
			return db.FromProc(procName);
		}
	}

}

